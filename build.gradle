import com.github.gradle.node.npm.task.NpmTask

plugins {
    id 'org.springframework.boot' version '3.4.0'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'java'
    id 'com.github.node-gradle.node' version '7.1.0'
    id 'io.freefair.lombok' version '8.6'
}

group = 'io.bootify'
version = '0.0.1-SNAPSHOT'

java.sourceCompatibility = '17'

bootRun {
    environment SPRING_PROFILES_ACTIVE: environment.SPRING_PROFILES_ACTIVE ?: 'local'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    implementation('org.springframework.boot:spring-boot-starter-validation')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    runtimeOnly('com.mysql:mysql-connector-j')
    implementation('io.github.wimdeblauwe:error-handling-spring-boot-starter:4.5.0')
    implementation('org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0')
    compileOnly('org.projectlombok:lombok')
    annotationProcessor('org.projectlombok:lombok')
    testCompileOnly('org.projectlombok:lombok')
    testAnnotationProcessor('org.projectlombok:lombok')
    developmentOnly('org.springframework.boot:spring-boot-devtools')
    implementation ('org.springframework.boot:spring-boot-starter-thymeleaf')
    implementation ('org.xhtmlrenderer:flying-saucer-pdf:9.1.22')
    implementation 'com.lowagie:itext:2.1.7'
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
}

node {
    download.set(true)
    version.set('22.11.0')
}

tasks.register('npmRunBuild', NpmTask) {
    workingDir = project.projectDir
    args = ['run', 'build']
    dependsOn tasks.named('npmInstall')
    outputs.dir(layout.buildDirectory.dir('angular'))
}

tasks.named('npmRunBuild', NpmTask).configure {
    inputs.files(fileTree('src/main/webapp'))
    inputs.file('angular.json')
    inputs.file('package.json')
    inputs.file('tsconfig.json')
    inputs.file('tsconfig.app.json')
    outputs.dir(layout.buildDirectory.dir('angular/browser'))
}

def frontendDistDir = layout.buildDirectory.dir('angular/browser')
def generatedResourcesDir = "$buildDir/generated-resources/main"

tasks.register('syncFrontendResources', Sync) {
    dependsOn 'npmRunBuild'
    from(frontendDistDir)
    into("$generatedResourcesDir/static")
    include '**/*'
    includeEmptyDirs = false
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    outputs.dir("$generatedResourcesDir/static")
}

sourceSets {
    main { resources { srcDir(generatedResourcesDir) } }
}

tasks.named('processResources') { dependsOn 'syncFrontendResources' }
tasks.named('bootRun') { dependsOn 'syncFrontendResources', 'processResources' }


tasks.named('clean') {
    delete("$buildDir/generated-resources")
}

tasks.withType(Test).configureEach { useJUnitPlatform() }
